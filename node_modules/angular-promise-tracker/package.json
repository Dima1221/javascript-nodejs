{
  "_args": [
    [
      "angular-promise-tracker@git://github.com/ajoslin/angular-promise-tracker.git",
      "/js/build"
    ]
  ],
  "_from": "git://github.com/ajoslin/angular-promise-tracker.git",
  "_id": "angular-promise-tracker@2.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/angular-promise-tracker",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/ajoslin/angular-promise-tracker/master/package.json",
      "gitUrl": "git://github.com/ajoslin/angular-promise-tracker.git",
      "httpsUrl": "git+https://github.com/ajoslin/angular-promise-tracker.git",
      "shortcut": "github:ajoslin/angular-promise-tracker",
      "ssh": "git@github.com:ajoslin/angular-promise-tracker.git",
      "sshUrl": "git+ssh://git@github.com/ajoslin/angular-promise-tracker.git",
      "type": "github"
    },
    "name": "angular-promise-tracker",
    "raw": "angular-promise-tracker@git://github.com/ajoslin/angular-promise-tracker.git",
    "rawSpec": "git://github.com/ajoslin/angular-promise-tracker.git",
    "scope": null,
    "spec": "git://github.com/ajoslin/angular-promise-tracker.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/ajoslin/angular-promise-tracker.git#dc848e4bcd6ffaa00c45807efc7a8658a8ba2c63",
  "_shasum": "ea950197d9cc9d3f832c877542f8498b8728c088",
  "_shrinkwrap": null,
  "_spec": "angular-promise-tracker@git://github.com/ajoslin/angular-promise-tracker.git",
  "_where": "/js/build",
  "author": {
    "name": "Andy Joslin"
  },
  "bugs": {
    "url": "https://github.com/ajoslin/angular-promise-tracker/issues"
  },
  "dependencies": {},
  "description": "angular-promise-tracker =======================",
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-conventional-changelog": "~1.1.0",
    "grunt-karma": "~0.6.2",
    "grunt-shell": "~0.6.1",
    "karma": "~0.10.8",
    "karma-chrome-launcher": "~0.1.2",
    "karma-coffee-preprocessor": "~0.1.1",
    "karma-firefox-launcher": "~0.1.2",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-jasmine": "~0.1.5",
    "karma-phantomjs-launcher": "~0.1.1",
    "karma-requirejs": "~0.2.1",
    "karma-script-launcher": "~0.1.0",
    "load-grunt-tasks": "~0.2.1",
    "requirejs": "~2.1.9",
    "semver": "~2.2.1"
  },
  "gitHead": "dc848e4bcd6ffaa00c45807efc7a8658a8ba2c63",
  "homepage": "https://github.com/ajoslin/angular-promise-tracker",
  "main": "promise-tracker.js",
  "name": "angular-promise-tracker",
  "optionalDependencies": {},
  "readme": "angular-promise-tracker\n=======================\n\n> **Version**: 2.0\n\n(note to users using version 1.x: upgrading has *many* breaking changes, see [the CHANGELOG](https://github.com/ajoslin/angular-promise-tracker/tree/master/CHANGELOG.md).)\n\n[![Build Status](https://travis-ci.org/ajoslin/angular-promise-tracker.png)](https://travis-ci.org/ajoslin/angular-promise-tracker)\n\nSmall, feature filled library used to easily add spinners or general promise/request tracking to your angular app.\n\n* [Quick Start](#quick-start)\n* [API Documentation](#api-documentation)\n* [Changes](https://github.com/ajoslin/angular-promise-tracker/tree/master/CHANGELOG.md)\n* [License](#license)\n\n## Quick Start\n\nThe basic idea: each time we add one or more promises to an instance of a `promiseTracker`, that instance's `active()` method will return true until all added promises are resolved. A common use case is showing some sort of loading spinner while some http requests are loading.\n\n[Play with this example on plunkr](http://plnkr.co/edit/PrO2ou9b1uANbeGoX6eB?p=preview)\n\n```sh\n$ bower install angular-promise-tracker\n```\n```html\n<body ng-app=\"myApp\" ng-controller=\"MainCtrl\">\n  <div class=\"my-super-awesome-loading-box\" ng-show=\"loadingTracker.active()\">\n    Loading...\n  </div>\n  <button ng-click=\"delaySomething()\">Delay Something</button>\n  <button ng-click=\"fetchSomething()\">Fetch Something</button>\n\n  <script src=\"angular.js\"></script>\n  <script src=\"promise-tracker.js\"></script>\n\n  <!-- optional for $http sugar -->\n  <script src=\"promise-tracker-http-interceptor.js\"></script>\n</body>\n```\n```js\nangular.module('myApp', ['ajoslin.promise-tracker'])\n.controller('MainCtrl', function($scope, $http, $timeout, promiseTracker) {\n  //Create a new tracker\n  $scope.loadingTracker = promiseTracker();\n\n  //use `addPromise` to add any old promise to our tracker\n  $scope.delaySomething = function() {\n    var promise = $timeout(function() {\n      alert('Delayed something!');\n    }, 1000);\n    $scope.loadingTracker.addPromise(promise);\n  };\n\n  //use `tracker:` shortcut in $http config to link our http promise to a tracker\n  //This shortcut is included in promise-tracker-http-interceptor.js\n  $scope.fetchSomething = function(id) {\n    return $http.get('/something', {\n      tracker: $scope.loadingTracker\n    }).then(function(response) {\n      alert('Fetched something! ' + response.data);\n    });\n  };\n});\n```\n\n## API Documentation\n\n### Service `promiseTracker`\n\n* **`tracker` promiseTracker([options])**\n\n  Creates and returns a new promiseTracker.\n\n  Options can be given as an object, with the following allowed values:\n\n  - `activationDelay` `{Number}` - Number of milliseconds that an added promise needs to be pending before this tracker is active.\n      * Usage example: You have some http calls that sometimes return too quickly for a loading spinner to look good. You only want to show the tracker if a promise is pending for over 500ms. You put `{activationDelay: 500}` in options.\n  - `minDuration` `{Number}` - Minimum number of milliseconds that a tracker will stay active.\n      * Usage example: You want a loading spinner to always show up for at least 750ms. You put `{minDuration: 750}` in options.\n\n  Often you want a global promiseTracker (eg to show a loading screen); one easy way is to put the tracker on your $rootScope:\n\n  ```js\n  app.run(function($rootScope, promiseTracker) {\n    $rootScope.loadingTracker = promiseTracker();\n  });\n  ```\n\n### Instantiated promiseTracker\n\nExample: `var myTracker = promiseTracker({ activationDelay: 500, minDuration: 750 });`\n\n* **`boolean` tracker.active()**\n\n  Returns whether this tracker is currently active. That is, whether any of the promises added to/created by this tracker are still pending. Note: if the `activationDelay` has not elapsed yet, this will return false.\n\n* **`boolean` tracker.tracking()**\n\n  Returns whether this tracker is currently tracking a request. That is, whether any of the promises added to/created by this tracker are still pending.  This method has no regard for `activationDelay`.\n\n* **`void` tracker.addPromise(promise)**\n\n  Add any arbitrary promise to tracker. `tracker.active()` will be true until `promise` is resolved or rejected.\n\n  - `promise` `{object}` - Promise to add\n\n  Usage Example:\n\n  ```js\n  var promise = $timeout(doSomethingCool, 1000);\n  myTracker.addPromise(promise);\n  console.log(myTracker.active()); // => true\n  //1000 milliseconds later...\n  console.log(myTracker.active()); // => false\n  ```\n\n* **`promise` tracker.createPromise()**\n\n  Creates and returns a new deferred object that is tracked by our promiseTracker.\n\n  Usage Example:\n\n  ```js\n  var deferred = myTracker.createPromise()\n  console.log(myTracker.active()); // => true\n  deferred.resolve();\n  console.log(myTracker.active()); // => false\n  ```\n\n* **`void` tracker.cancel()**\n\n  Causes a tracker to immediately become inactive and stop tracking all current promises.\n\n### **`$http` Sugar**\n\n  **Requires promise-tracker-http-interceptor.js**\n\n  * **Any $http call's `config` parameter can have a `tracker` field. Examples:**\n\n  ```js\n  //Add $http promise to tracker with id 'myTracker'\n  $http('/banana', { tracker: myPromiseTrackerInstance })\n  ```\n  ```js\n  //Add $http promise to both 'tracker1' and 'tracker2'\n  $http.post('/elephant', {some: 'data'}, { tracker: [myFirstTracker, mySecondTracker] })\n  ```\n  \n## More Examples\n\n* Do something whenever the tracker's active state changes\n\n```js\nangular.module('app', ['ajoslin.promise-tracker'])\n\n.factory('myTracker', function (promiseTracker) {\n  return promiseTracker();\n})\n\n.controller('AppCtrl', function ($rootScope, myTracker) {\n  $rootScope.$watch(myTracker.active, function (isActive) {\n    //doSomething()\n  });\n});\n```\n\n## Development\n\n* Install karma & grunt with `npm install -g karma grunt-cli` to build & test\n* Install local dependencies with `bower install && npm install`\n* Run `grunt` to lint, test, build the code, and build the docs site\n* Run `grunt dev` to watch and re-test on changes\n\n#### New Versions\n\n## <a id=\"license\"></a>License\n\n> <a rel=\"license\" href=\"http://creativecommons.org/publicdomain/mark/1.0/\"> <img src=\"http://i.creativecommons.org/p/mark/1.0/80x15.png\" style=\"border-style: none;\" alt=\"Public Domain Mark\" /> </a> <span property=\"dct:title\">angular-promise-tracker</span> by <a href=\"http://ajoslin.com\" rel=\"dct:creator\"><span property=\"dct:title\">Andy Joslin</span></a> is free of known copyright restrictions.\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git://github.com/ajoslin/angular-promise-tracker.git"
  },
  "version": "2.1.0"
}
